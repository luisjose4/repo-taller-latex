        -:    0:Source:/Users/usuario/Desktop/LabAlgo1/tp2/reunionesRemotas/src/auxiliares.cpp
        -:    0:Graph:/Users/usuario/Desktop/LabAlgo1/tp2/reunionesRemotas/cmake-build-debug/CMakeFiles/reunionesRemotas.dir/src/auxiliares.cpp.gcno
        -:    0:Data:/Users/usuario/Desktop/LabAlgo1/tp2/reunionesRemotas/cmake-build-debug/CMakeFiles/reunionesRemotas.dir/src/auxiliares.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "../lib/gtest.h"
        -:    2:#include "definiciones.h"
        -:    3:#include "auxiliares.h"
        -:    4:#include <fstream>
        -:    5:
        -:    6:
     3484:    7:senial subSeq(senial s, int i, int r)
     3484:    7-block  0
        -:    8:{
     3484:    9:    senial w = {};
   162236:   10:    for (int j = i; j < r; ++j) {
     3484:   10-block  0
   162236:   10-block  1
   158752:   10-block  2
   158752:   11:        w.push_back(s[j]);
   158752:   11-block  0
   158752:   11-block  1
   158752:   12:    }
   158752:   12-block  0
     3484:   13:    return w;
     3484:   14:}
    $$$$$:   14-block  0
     3484:   14-block  1
    $$$$$:   14-block  2
     3484:   14-block  3
    $$$$$:   14-block  4
        -:   15:
        -:   16:
        -:   17:/************* esSenial *************/
       50:   18:bool freqValida(int freq)
       50:   18-block  0
        -:   19:{
       50:   20:    return freq == 10;
       50:   20-block  0
        -:   21:}
        -:   22:
       46:   23:bool enRango(senial s, int prof)
       46:   23-block  0
        -:   24:{
       46:   25:    int umbralSuperior = pow(2, prof - 1) - 1;
       46:   26:    int umbralInferior = -pow(2, prof - 1);
       46:   27:    bool res = true;
        -:   28:
      514:   29:    for (int i = 0; i < s.size() && res; i++) {
       46:   29-block  0
      514:   29-block  1
      475:   29-block  2
      514:   29-block  3
      468:   29-block  4
      468:   30:        res = ( umbralInferior <= s[i]  &&  s[i] <= umbralSuperior );
      468:   30-block  0
      467:   30-block  1
      468:   31:    }
      468:   31-block  0
        -:   32:
       46:   33:    return res;
       46:   33-block  0
        -:   34:}
        -:   35:
       38:   36:bool profValida(int prof)
       38:   36-block  0
        -:   37:{
       38:   38:    return prof == 8 || prof == 16 || prof == 32;
       38:   38-block  0
        4:   38-block  1
        3:   38-block  2
       38:   38-block  3
        -:   39:}
        -:   40:
       37:   41:bool duraMasDe(senial s, int freq, float seg)
       37:   41-block  0
        -:   42:{
       37:   43:    return s.size() >= freq * seg;
       37:   43-block  0
        -:   44:}
        -:   45:
       30:   46:bool esValida(vector<int> s, int prof, int freq){
       30:   46-block  0
       56:   47:    return freqValida(freq)  &&  enRango(s, prof)  &&  profValida(prof)  &&  duraMasDe(s, freq, 1);
       30:   47-block  0
       29:   47-block  1
       29:   47-block  2
       27:   47-block  3
       27:   47-block  4
       26:   47-block  5
       26:   47-block  6
       30:   47-block  7
       26:   47-block  8
       30:   47-block  9
       29:   47-block 10
       30:   47-block 11
    $$$$$:   47-block 12
    $$$$$:   47-block 13
    $$$$$:   47-block 14
    $$$$$:   47-block 15
    $$$$$:   47-block 16
    $$$$$:   47-block 17
    $$$$$:   47-block 18
    #####:   48:}
    $$$$$:   48-block  0
        -:   49:
        -:   50:/************* seEnojo **************/
     3694:   51:float tono(senial s)
        -:   52:{
     3694:   53:    float sum = 0;
     3694:   53-block  0
        -:   54:
   165200:   55:    for (int i = 0; i < s.size(); i++) {
     3694:   55-block  0
   165200:   55-block  1
   161506:   55-block  2
   161506:   56:        sum += abs(s[i]);
   161506:   57:    }
   161506:   57-block  0
        -:   58:
     3694:   59:    return sum / s.size();
     3694:   59-block  0
        -:   60:}
        -:   61:
     3470:   62:bool superaUmbral(senial s, int umbral)
     3470:   62-block  0
        -:   63:{
     3470:   64:    return tono(s) > umbral;
     3470:   64-block  0
     3470:   64-block  1
    $$$$$:   64-block  2
    $$$$$:   64-block  3
    #####:   65:}
        -:   66:
        -:   67:
        -:   68:/************ esReunionValida ******/
       16:   69:bool esMatriz(reunion r)
        -:   70:{
       16:   71:    bool res = true;
       16:   71-block  0
       16:   72:    senial senialModelo = r[0].first;
        -:   73:
       35:   74:    for (int i = 1; i < r.size() && res; ++i) {
       16:   74-block  0
       35:   74-block  1
       19:   74-block  2
       35:   74-block  3
       19:   74-block  4
       19:   75:        senial senial_i = r[i].first;
       19:   75-block  0
       19:   75-block  1
        -:   76:
       19:   77:        res = ( senialModelo.size() == senial_i.size() );
       19:   78:    }
       19:   78-block  0
        -:   79:
       16:   80:    return res;
       16:   81:}
    $$$$$:   81-block  0
       16:   81-block  1
    $$$$$:   81-block  2
        -:   82:
       14:   83:bool senialesValidas(reunion r, int prof, int freq)
       14:   83-block  0
        -:   84:{
       14:   85:    bool res = true;
        -:   86:
       44:   87:    for (int i = 0; i < r.size() && res; ++i) {
       14:   87-block  0
       44:   87-block  1
       31:   87-block  2
       44:   87-block  3
       30:   87-block  4
       30:   88:        res = esValida(r[i].first, prof, freq);
       30:   88-block  0
    $$$$$:   88-block  1
    $$$$$:   88-block  2
       30:   89:    }
       30:   89-block  0
        -:   90:
       14:   91:    return res;
       14:   91-block  0
    #####:   92:}
        -:   93:
        9:   94:bool todosHablantesDistintos(reunion r)
        -:   95:{
        9:   96:    bool res = true;
        9:   96-block  0
        -:   97:
       30:   98:    for (int i = 0; i < r.size() && res; ++i) {
        9:   98-block  0
       30:   98-block  1
       22:   98-block  2
       30:   98-block  3
       21:   98-block  4
       42:   99:        for (int j = i + 1; j < r.size() && res; ++j) {
       21:   99-block  0
       42:   99-block  1
       21:   99-block  2
       42:   99-block  3
       21:   99-block  4
       21:  100:            res = ( r[i].second != r[j].second );
       21:  101:        }
       21:  101-block  0
       21:  102:    }
       21:  102-block  0
        -:  103:
        9:  104:    return res;
        9:  104-block  0
        -:  105:}
        -:  106:
        9:  107:bool hablantesDeReunionValidos(reunion r, int prof, int freq)
        9:  107-block  0
        -:  108:{
        9:  109:    bool res = todosHablantesDistintos(r);
        9:  109-block  0
    $$$$$:  109-block  1
    $$$$$:  109-block  2
        -:  110:
       27:  111:    for (int i = 0; i < r.size() && res; ++i) {
        9:  111-block  0
       27:  111-block  1
       20:  111-block  2
       27:  111-block  3
       18:  111-block  4
       18:  112:        res = ( 0 <= r[i].second  &&  r[i].second < r.size() );
       18:  112-block  0
       18:  112-block  1
       18:  113:    }
       18:  113-block  0
        -:  114:
        9:  115:    return res;
        9:  115-block  0
    #####:  116:}
        -:  117:
        -:  118:
        -:  119:/************ acelerar *************/
       17:  120:void acelerarSenial(senial &s, int prof, int freq)
       17:  120-block  0
        -:  121:{
       17:  122:    senial salida = {};
      189:  123:    for (int i = 1; i < s.size(); i = i+2) {
       17:  123-block  0
      189:  123-block  1
      172:  123-block  2
      172:  124:        salida.push_back(s[i]);
      172:  124-block  0
      172:  124-block  1
      172:  125:    }
      172:  125-block  0
       17:  126:    s = salida;
       17:  126-block  0
       17:  127:}
    $$$$$:  127-block  0
       17:  127-block  1
    $$$$$:  127-block  2
        -:  128:
        -:  129:
        -:  130:/*********** ralentizar ************/
       15:  131:void ralentizarSenial(senial &s, int prof, int freq)
       15:  131-block  0
        -:  132:{
       15:  133:    int longFinal = 2 * s.size() - 1;
       15:  134:    senial salida(longFinal, 0);
        -:  135:
      326:  136:    for (int i = 0; i < salida.size(); ++i) {
       15:  136-block  0
      326:  136-block  1
      311:  136-block  2
      311:  137:        if (i % 2 == 0) {
      311:  137-block  0
      163:  138:            salida[i] = s[i / 2];
      163:  138-block  0
      163:  138-block  1
      163:  139:        } else {
      163:  139-block  0
      148:  140:            salida[i] = (s[(i - 1) / 2] + s[(i + 1) / 2]) / 2;
      148:  140-block  0
      148:  140-block  1
      148:  140-block  2
      148:  140-block  3
        -:  141:        }
      311:  142:    }
      311:  142-block  0
        -:  143:
       15:  144:    s = salida;
       15:  144-block  0
       15:  145:}
    $$$$$:  145-block  0
       15:  145-block  1
    $$$$$:  145-block  2
        -:  146:
        -:  147:
        -:  148:/********* tonosDeVozElevados ******/
        -:  149:// Sin auxiliares
        -:  150:
        -:  151:
        -:  152:/************* ordenar *************/
       51:  153:void swapPorTono(reunion &reunion, int i, int j)
       51:  153-block  0
        -:  154:{
       51:  155:    pair<senial, hablante> k = reunion[i];
       51:  156:    reunion[i] = reunion[j];
       51:  156-block  0
       51:  156-block  1
       51:  156-block  2
       51:  157:    reunion[j] = k;
       51:  157-block  0
       51:  157-block  1
       51:  158:}
       51:  158-block  0
    $$$$$:  158-block  1
    $$$$$:  158-block  2
        -:  159:
        -:  160:
        -:  161:/************* silencios *************/
      205:  162:bool muestraSuperaUmbral(int valor, int umbral)
      205:  162-block  0
        -:  163:{
      205:  164:    return abs(valor) >= umbral;
      205:  164-block  0
        -:  165:}
        -:  166:
       52:  167:void agregarIntervaloSiCorresponde(vector<intervalo> &outListaIntervalos, int inicioSilencio, int indiceActual, bool esSilencio)
       52:  167-block  0
        -:  168:{
       52:  169:    intervalo silencio;
        -:  170:
       52:  171:	if(esSilencio){
       52:  171-block  0
       18:  172:	    silencio.first = inicioSilencio;
       18:  173:	    silencio.second = indiceActual;
        -:  174:
       18:  175:	    outListaIntervalos.push_back(silencio);
       18:  176:	}
       18:  176-block  0
        -:  177:
       52:  178:}
       52:  178-block  0
        -:  179:
        -:  180:
        -:  181:/****** hablantesSuperpuestos ********/
      236:  182:int valorAbsoluto(int x)
      236:  182-block  0
        -:  183:{
      236:  184:    return (x < 0) ? (-x) : x;
      236:  184-block  0
       33:  184-block  1
      203:  184-block  2
      236:  184-block  3
        -:  185:}
        -:  186:
      114:  187:bool estaHablando(senial s, int pos, int umbral)
      114:  187-block  0
        -:  188:{
      114:  189:    bool superaUmbral = valorAbsoluto( s[pos] )  >= umbral;
      114:  190:    bool algunoConsecutivoSuperaUmbral = true;
      114:  191:    if ( pos == 0 ) {
      114:  191-block  0
       19:  192:        algunoConsecutivoSuperaUmbral = (valorAbsoluto(s[pos + 1]) >= umbral);
      114:  193:    } else if ( pos == s.size() - 1 ) {
       19:  193-block  0
       95:  193-block  1
       10:  194:        algunoConsecutivoSuperaUmbral = (valorAbsoluto(s[pos - 1]) >= umbral);
       10:  195:    } else {
       10:  195-block  0
       85:  196:        algunoConsecutivoSuperaUmbral = ( valorAbsoluto( s[pos - 1] ) >= umbral && ( valorAbsoluto( s[pos + 1] ) >= umbral ) );
       85:  196-block  0
        8:  196-block  1
       85:  196-block  2
        -:  197:    }
      114:  198:    return ( superaUmbral || algunoConsecutivoSuperaUmbral );
      114:  198-block  0
       98:  198-block  1
      114:  198-block  2
        -:  199:}
        -:  200:
        -:  201:
        -:  202:/*********** reconstruir *************/
       14:  203:int valor(vector<int> s, int i)
       14:  203-block  0
        -:  204:{
       14:  205:    int m = 0;
       14:  206:    int n = 0;
       38:  207:    for (int j = i - 1; j != 0 && n == 0; --j) {
       14:  207-block  0
       38:  207-block  1
       34:  207-block  2
       38:  207-block  3
       24:  207-block  4
       24:  208:        if (s[j] != 0) {
       24:  208-block  0
       10:  209:            n = j;
       10:  210:        }
       10:  210-block  0
       24:  211:    }
       24:  211-block  0
       42:  212:    for (int k = i + 1; k != s.size() && m == 0; ++k) {
       14:  212-block  0
       42:  212-block  1
       36:  212-block  2
       42:  212-block  3
       28:  212-block  4
       28:  213:        if (s[k] != 0) {
       28:  213-block  0
       14:  214:            m = k;
       14:  215:        }
       14:  215-block  0
       28:  216:    }
       28:  216-block  0
        -:  217:
       14:  218:    return (s[n] + s[m]) / 2;
       14:  218-block  0
        -:  219:}
        -:  220:
       30:  221:int signo(int k)
       30:  221-block  0
        -:  222:{
       30:  223:    if (k > 0) {
       30:  223-block  0
        5:  224:        return 1;
        5:  224-block  0
       25:  225:    } else if (k < 0) {
       25:  225-block  0
        9:  226:        return -1;
        9:  226-block  0
        -:  227:    } else {
       16:  228:        return 0;
       16:  228-block  0
        -:  229:    }
       30:  230:}
       30:  230-block  0
        -:  231:
       15:  232:bool esPasajePorCero(vector<int> s, int i)
       15:  232-block  0
        -:  233:{
       15:  234:    return signo(s[i - 1]) * signo(s[i + 1]) == -1;
       15:  234-block  0
        -:  235:}
        -:  236:
        -:  237:
        -:  238:/********* filtradoMediana **********/
       30:  239:bool coincidenExtremos(senial s, int i, int r)
       30:  239-block  0
        -:  240:{
       30:  241:    return i < r || i >= s.size() - r;
       30:  241-block  0
       22:  241-block  1
       30:  241-block  2
        -:  242:}
        -:  243:
       66:  244:void swap(senial &lista, int i, int j)
       66:  244-block  0
        -:  245:{
       66:  246:    int k = lista[i];
       66:  247:    lista[i] = lista[j];
       66:  248:    lista[j] = k;
       66:  249:}
       66:  249-block  0
        -:  250:
       78:  251:void insertar(senial &lista, int i)
       78:  251-block  0
        -:  252:{
      144:  253:    while (i > 0 && lista[i] < lista[i - 1]) {
       78:  253-block  0
      144:  253-block  1
      118:  253-block  2
      144:  253-block  3
       66:  253-block  4
       66:  254:        swap(lista, i, i - 1);
       66:  255:        i--;
        -:  256:    }
       78:  257:}
       78:  257-block  0
        -:  258:
       14:  259:senial insertionSort(senial lista)
        -:  260:{
       92:  261:    for (int i = 0; i < lista.size(); i++) {
       14:  261-block  0
       14:  261-block  1
       92:  261-block  2
       78:  261-block  3
       78:  262:        insertar(lista, i);
       78:  263:    }
       78:  263-block  0
       14:  264:    return lista;
       14:  264-block  0
        -:  265:}
        -:  266:
       14:  267:senial ordenarSenialW(senial w)
        -:  268:{
       14:  269:    return insertionSort(w);
       14:  269-block  0
       14:  269-block  1
       14:  269-block  2
    $$$$$:  269-block  3
    $$$$$:  269-block  4
    #####:  270:}
        -:  271:
        -:  272:
        -:  273:/************* Ejercicio 4 *************/
    #####:  274:senial leerSenial(string nombreArchivo)
        -:  275:{
    #####:  276:    senial s(0);
    $$$$$:  276-block  0
        -:  277:    int valor;
    #####:  278:    ifstream inputArchivo;
    $$$$$:  278-block  0
        -:  279:
        -:  280:
    #####:  281:    inputArchivo.open(nombreArchivo.c_str(), ios_base::in);
    $$$$$:  281-block  0
    #####:  282:    if (inputArchivo.is_open() == false) {
    $$$$$:  282-block  0
    $$$$$:  282-block  1
    #####:  283:        return s;
    $$$$$:  283-block  0
        -:  284:    }
        -:  285:
    #####:  286:    while(!inputArchivo.eof()){
    $$$$$:  286-block  0
    $$$$$:  286-block  1
    $$$$$:  286-block  2
    $$$$$:  286-block  3
    #####:  287:    	inputArchivo >> valor;
    $$$$$:  287-block  0
    #####:  288:    	s.push_back(valor);
    $$$$$:  288-block  0
        -:  289:    }
        -:  290:
    #####:  291:    inputArchivo.close();
    $$$$$:  291-block  0
    #####:  292:    return s;
    $$$$$:  292-block  0
    #####:  293:}
    $$$$$:  293-block  0
    $$$$$:  293-block  1
    $$$$$:  293-block  2
    $$$$$:  293-block  3
    $$$$$:  293-block  4
    $$$$$:  293-block  5
    $$$$$:  293-block  6
        -:  294:
    #####:  295:void escribirSenial(senial s, string nombreArchivo)
        -:  296:{
    #####:  297:    ofstream outputArchivo;
    $$$$$:  297-block  0
        -:  298:
    #####:  299:    outputArchivo.open(nombreArchivo.c_str(), ios_base::app);
    $$$$$:  299-block  0
    #####:  300:    if ( !outputArchivo.is_open() ) {
    $$$$$:  300-block  0
    $$$$$:  300-block  1
    #####:  301:        return;
    $$$$$:  301-block  0
        -:  302:    }
        -:  303:
    #####:  304:    for (int k = 0; k < s.size(); k++) {
    $$$$$:  304-block  0
    $$$$$:  304-block  1
    $$$$$:  304-block  2
    #####:  305:        outputArchivo << s[k] << ' ';
    $$$$$:  305-block  0
    $$$$$:  305-block  1
    $$$$$:  305-block  2
    #####:  306:    }
    $$$$$:  306-block  0
        -:  307:
    #####:  308:    outputArchivo.close();
    $$$$$:  308-block  0
    #####:  309:}
    $$$$$:  309-block  0
    $$$$$:  309-block  1
    $$$$$:  309-block  2
    $$$$$:  309-block  3
    $$$$$:  309-block  4
        -:  310:
        -:  311:/************* Ejercicio 4 *************/
        -:  312:
        -:  313:
        -:  314:
       70:  315:bool senialesOrdenadasIguales(senial s1, senial s2){
        -:  316:
       70:  317:    if(s1.size() != s2.size())
       70:  317-block  0
       70:  317-block  1
    #####:  318:        return false;
    $$$$$:  318-block  0
        -:  319:
     1029:  320:    for (int i = 0; i < s1.size(); ++i){
       70:  320-block  0
     1029:  320-block  1
      959:  320-block  2
      959:  321:        if (s1[i] != s2[i]){
      959:  321-block  0
    #####:  322:        	return false;
    $$$$$:  322-block  0
        -:  323:        }
      959:  324:    }
      959:  324-block  0
        -:  325:
       70:  326:    return true;
       70:  326-block  0
       70:  327:}
       70:  327-block  0
        -:  328:
       22:  329:bool reunionesIguales(reunion reunion1, reunion reunion2){
       22:  330:    if(reunion1.size() != reunion2.size())
       22:  330-block  0
       22:  330-block  1
    #####:  331:        return false;
    $$$$$:  331-block  0
        -:  332:
       89:  333:    for (int i = 0; i < reunion1.size(); ++i) {
       22:  333-block  0
       89:  333-block  1
       67:  333-block  2
       67:  334:        if(reunion1[i].second != reunion2[i].second)
       67:  334-block  0
    #####:  335:            return false;
    $$$$$:  335-block  0
        -:  336:
       67:  337:        if(reunion1[i].first.size() != reunion2[i].first.size())
       67:  337-block  0
    #####:  338:            return false;
    $$$$$:  338-block  0
        -:  339:
       67:  340:        if(!senialesOrdenadasIguales(reunion1[i].first, reunion2[i].first))
       67:  340-block  0
       67:  340-block  1
       67:  340-block  2
       67:  340-block  3
    $$$$$:  340-block  4
    $$$$$:  340-block  5
    $$$$$:  340-block  6
    #####:  341:            return false;
    $$$$$:  341-block  0
       67:  342:    }
       67:  342-block  0
        -:  343:
       22:  344:    return true;
       22:  344-block  0
       22:  345:}
    $$$$$:  345-block  0
       22:  345-block  1
        -:  346:
       12:  347:bool hablantesOrdenadosIguales(vector<hablante> s1, vector<hablante> s2){
       12:  348:    if(s1.size() != s2.size())
       12:  348-block  0
       12:  348-block  1
    #####:  349:        return false;
    $$$$$:  349-block  0
        -:  350:
       12:  351:    sort(s1.begin(), s1.end());
       12:  352:    sort(s2.begin(), s2.end());
        -:  353:
       68:  354:    for (int i = 0; i < s1.size(); ++i)
       12:  354-block  0
       68:  354-block  1
       56:  354-block  2
       56:  355:        if (s1[i] != s2[i]){return false;}
       56:  355-block  0
    $$$$$:  355-block  1
       56:  355-block  2
        -:  356:
       12:  357:    return true;
       12:  357-block  0
       12:  358:}
       12:  358-block  0
        -:  359:
        8:  360:bool intervalosOrdenadosIguales(vector<intervalo> s1, vector<intervalo> s2){
        8:  361:    if(s1.size() != s2.size())
        8:  361-block  0
        8:  361-block  1
    #####:  362:        return false;
    $$$$$:  362-block  0
        -:  363:
        8:  364:    sort(s1.begin(), s1.end());
        8:  365:    sort(s2.begin(), s2.end());
        -:  366:
       25:  367:    for (int i = 0; i < s1.size(); ++i)
        8:  367-block  0
       25:  367-block  1
       17:  367-block  2
       17:  368:        if (s1[i] != s2[i]){return false;}
       17:  368-block  0
    $$$$$:  368-block  1
       17:  368-block  2
        -:  369:
        8:  370:    return true;
        8:  370-block  0
        8:  371:}
        8:  371-block  0
        -:  372:
        3:  373:void ASSERT_SENIAL_EQ(senial s1, senial s2) {
        3:  374:    ASSERT_TRUE(senialesOrdenadasIguales(s1, s2));
        3:  374-block  0
        3:  374-block  1
        3:  374-block  2
        3:  374-block  3
        3:  374-block  4
        3:  374-block  5
        3:  374-block  6
    $$$$$:  374-block  7
    $$$$$:  374-block  8
    $$$$$:  374-block  9
    $$$$$:  374-block 10
    $$$$$:  374-block 11
    $$$$$:  374-block 12
    $$$$$:  374-block 13
    $$$$$:  374-block 14
    $$$$$:  374-block 15
    $$$$$:  374-block 16
        3:  374-block 17
        3:  374-block 18
    $$$$$:  374-block 19
    $$$$$:  374-block 20
        3:  375:}
    $$$$$:  375-block  0
    $$$$$:  375-block  1
    $$$$$:  375-block  2
    $$$$$:  375-block  3
        3:  375-block  4
        -:  376:
       22:  377:void ASSERT_REUNION_EQ(reunion reunion1, reunion reunion2) {
       22:  378:    ASSERT_TRUE(reunionesIguales(reunion1, reunion2));
       22:  378-block  0
       22:  378-block  1
       22:  378-block  2
       22:  378-block  3
       22:  378-block  4
       22:  378-block  5
       22:  378-block  6
    $$$$$:  378-block  7
    $$$$$:  378-block  8
    $$$$$:  378-block  9
    $$$$$:  378-block 10
    $$$$$:  378-block 11
    $$$$$:  378-block 12
    $$$$$:  378-block 13
    $$$$$:  378-block 14
    $$$$$:  378-block 15
    $$$$$:  378-block 16
       22:  378-block 17
       22:  378-block 18
    $$$$$:  378-block 19
    $$$$$:  378-block 20
       22:  379:}
    $$$$$:  379-block  0
    $$$$$:  379-block  1
    $$$$$:  379-block  2
    $$$$$:  379-block  3
       22:  379-block  4
        -:  380:
       12:  381:void ASSERT_HABLANTES_EQ(vector<hablante> s1, vector<hablante> s2) {
       12:  382:    ASSERT_TRUE(hablantesOrdenadosIguales(s1, s2));
       12:  382-block  0
       12:  382-block  1
       12:  382-block  2
       12:  382-block  3
       12:  382-block  4
       12:  382-block  5
       12:  382-block  6
    $$$$$:  382-block  7
    $$$$$:  382-block  8
    $$$$$:  382-block  9
    $$$$$:  382-block 10
    $$$$$:  382-block 11
    $$$$$:  382-block 12
    $$$$$:  382-block 13
    $$$$$:  382-block 14
    $$$$$:  382-block 15
    $$$$$:  382-block 16
       12:  382-block 17
       12:  382-block 18
    $$$$$:  382-block 19
    $$$$$:  382-block 20
       12:  383:}
    $$$$$:  383-block  0
    $$$$$:  383-block  1
    $$$$$:  383-block  2
    $$$$$:  383-block  3
       12:  383-block  4
        -:  384:
        8:  385:void ASSERT_INTERVALOS_EQ(vector<intervalo> s1, vector<intervalo> s2) {
        8:  386:    ASSERT_TRUE(intervalosOrdenadosIguales(s1, s2));
        8:  386-block  0
        8:  386-block  1
        8:  386-block  2
        8:  386-block  3
        8:  386-block  4
        8:  386-block  5
        8:  386-block  6
    $$$$$:  386-block  7
    $$$$$:  386-block  8
    $$$$$:  386-block  9
    $$$$$:  386-block 10
    $$$$$:  386-block 11
    $$$$$:  386-block 12
    $$$$$:  386-block 13
    $$$$$:  386-block 14
    $$$$$:  386-block 15
    $$$$$:  386-block 16
        8:  386-block 17
        8:  386-block 18
    $$$$$:  386-block 19
    $$$$$:  386-block 20
        8:  387:}
    $$$$$:  387-block  0
    $$$$$:  387-block  1
    $$$$$:  387-block  2
    $$$$$:  387-block  3
        8:  387-block  4
