        -:    0:Source:/Users/usuario/Desktop/LabAlgo1/tp2/reunionesRemotas/src/solucion.cpp
        -:    0:Graph:/Users/usuario/Desktop/LabAlgo1/tp2/reunionesRemotas/cmake-build-debug/CMakeFiles/reunionesRemotas.dir/src/solucion.cpp.gcno
        -:    0:Data:/Users/usuario/Desktop/LabAlgo1/tp2/reunionesRemotas/cmake-build-debug/CMakeFiles/reunionesRemotas.dir/src/solucion.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "solucion.h"
        -:    2:#include "auxiliares.h"
        -:    3:#include "definiciones.h"
        -:    4:
        -:    5:// Ejercicios
        -:    6:
       20:    7:bool esSenial(vector<int> s, int prof, int freq) {
       20:    7-block  0
       31:    8:    return freqValida(freq)  &&  enRango(s, prof)  &&  profValida(prof)  &&  duraMasDe(s, freq, 1);
       20:    8-block  0
       17:    8-block  1
       17:    8-block  2
       11:    8-block  3
       11:    8-block  4
       11:    8-block  5
       11:    8-block  6
       20:    8-block  7
       11:    8-block  8
       20:    8-block  9
       17:    8-block 10
       20:    8-block 11
    $$$$$:    8-block 12
    $$$$$:    8-block 13
    $$$$$:    8-block 14
    $$$$$:    8-block 15
    $$$$$:    8-block 16
    $$$$$:    8-block 17
    $$$$$:    8-block 18
    #####:    9:}
    $$$$$:    9-block  0
        -:   10:
       14:   11:bool seEnojo(senial s, int umbral, int prof, int freq) {
       14:   11-block  0
       14:   12:    int cantMinimaDeElementos = 2 * freq;
        -:   13:
       14:   14:    if ( s.size() < cantMinimaDeElementos ) return false;
       14:   14-block  0
        4:   14-block  1
        -:   15:
       10:   16:    bool res = false;
        -:   17:
      118:   18:    for (int i = 0; ( i <= s.size() - cantMinimaDeElementos ) && !res; ++i) {
       10:   18-block  0
      118:   18-block  1
      111:   18-block  2
      118:   18-block  3
      108:   18-block  4
     3578:   19:        for (int j = i + cantMinimaDeElementos; ( j <= s.size() ) && !res; ++j) {
      108:   19-block  0
     3578:   19-block  1
     3473:   19-block  2
     3578:   19-block  3
     3470:   19-block  4
     3470:   20:            senial subseq = subSeq(s, i, j);
     3470:   20-block  0
    $$$$$:   20-block  1
    $$$$$:   20-block  2
        -:   21:
     3470:   22:            res = superaUmbral(subseq, umbral);
     3470:   22-block  0
     3470:   22-block  1
    $$$$$:   22-block  2
     3470:   23:        }
     3470:   23-block  0
    $$$$$:   23-block  1
      108:   24:    }
      108:   24-block  0
        -:   25:
       14:   26:    return res;}
    $$$$$:   26-block  0
       10:   26-block  1
       14:   26-block  2
        -:   27:
       17:   28:bool esReunionValida(reunion r, int prof, int freq) {
       17:   28-block  0
       17:   29:    return (
       17:   29-block  0
        9:   29-block  1
       17:   29-block  2
       14:   29-block  3
       17:   29-block  4
       16:   29-block  5
       17:   29-block  6
    $$$$$:   29-block  7
    $$$$$:   29-block  8
    $$$$$:   29-block  9
    $$$$$:   29-block 10
    $$$$$:   29-block 11
    $$$$$:   29-block 12
    $$$$$:   29-block 13
    $$$$$:   29-block 14
    $$$$$:   29-block 15
    $$$$$:   29-block 16
       17:   30:                r.size() > 0  &&
       17:   30-block  0
       16:   31:                esMatriz(r)  &&
       16:   31-block  0
       16:   31-block  1
       14:   32:                senialesValidas(r, prof, freq)  &&
       14:   32-block  0
       14:   32-block  1
       14:   32-block  2
        9:   33:                hablantesDeReunionValidos(r, prof, freq)
        9:   33-block  0
        9:   33-block  1
        -:   34:            );
    #####:   35:}
    $$$$$:   35-block  0
    $$$$$:   35-block  1
        -:   36:
        8:   37:void acelerar(reunion& r, int prof, int freq) {
        8:   37-block  0
       25:   38:    for (int i = 0; i < r.size(); ++i) {
        8:   38-block  0
       25:   38-block  1
       17:   38-block  2
       17:   39:        acelerarSenial(r[i].first, prof, freq);
       17:   40:    }
       17:   40-block  0
        8:   41:}
        8:   41-block  0
        -:   42:
        7:   43:void ralentizar(reunion& r, int prof, int freq) {
        7:   43-block  0
       22:   44:    for (int i = 0; i < r.size(); ++i) {
        7:   44-block  0
       22:   44-block  1
       15:   44-block  2
       15:   45:        ralentizarSenial(r[i].first, prof, freq);
       15:   46:    }
       15:   46-block  0
        7:   47:}
        7:   47-block  0
        -:   48:
        8:   49:vector<hablante> tonosDeVozElevados(reunion r, int freq, int prof) {
        8:   49-block  0
        8:   50:    vector<hablante> hablantes = { };
        8:   51:    float mayorTono = 0;
        -:   52:
       32:   53:    for (int i = 0; i < r.size(); ++i) {
        8:   53-block  0
       32:   53-block  1
       24:   53-block  2
       24:   54:        float iesimoTono = tono(r[i].first);
       24:   54-block  0
       24:   54-block  1
       24:   54-block  2
    $$$$$:   54-block  3
        -:   55:
       24:   56:        if (iesimoTono > mayorTono) {
       24:   56-block  0
       11:   57:            mayorTono = iesimoTono;
       11:   58:            hablantes = { r[i].second };
       11:   58-block  0
       11:   58-block  1
       11:   59:        }
       11:   59-block  0
       13:   60:        else if (iesimoTono == mayorTono) {
       13:   60-block  0
        7:   61:            hablantes.push_back(r[i].second);
        7:   61-block  0
        7:   61-block  1
        7:   62:        }
        7:   62-block  0
       24:   63:    }
       24:   63-block  0
        -:   64:
        8:   65:    return hablantes;
        8:   66:}
    $$$$$:   66-block  0
        8:   66-block  1
    $$$$$:   66-block  2
        8:   66-block  3
    $$$$$:   66-block  4
    $$$$$:   66-block  5
        -:   67:
        7:   68:void ordenar(reunion& r, int freq, int prof) {
        7:   68-block  0
        -:   69:
       35:   70:    for (int i = 1; i < r.size(); ++i) {
        7:   70-block  0
       35:   70-block  1
       28:   70-block  2
       28:   71:        pair<senial, hablante> elementoAOrdenar = r[i];
      128:   72:        for (int j = i-1; j >= 0; --j) {
       28:   72-block  0
      128:   72-block  1
      100:   72-block  2
      100:   73:            if (tono(elementoAOrdenar.first) > tono(r[j].first)) {
      100:   73-block  0
      100:   73-block  1
      100:   73-block  2
      100:   73-block  3
      100:   73-block  4
      100:   73-block  5
    $$$$$:   73-block  6
    $$$$$:   73-block  7
       51:   74:                swapPorTono(r, j+1, j);
       51:   74-block  0
       51:   75:            }
       51:   75-block  0
      100:   76:        }
      100:   76-block  0
       28:   77:    }
       28:   77-block  0
    $$$$$:   77-block  1
    $$$$$:   77-block  2
        7:   78:}
    $$$$$:   78-block  0
    $$$$$:   78-block  1
        7:   78-block  2
        -:   79:
        9:   80:vector<intervalo> silencios(senial s, int prof, int freq, int umbral)
        9:   80-block  0
        -:   81:{
        9:   82:    vector<intervalo> ret(0);
        9:   83:    int inicioSilencio = 0;
        9:   84:    bool esSilencio = false;
        -:   85:
      140:   86:    for (int i = 0; i < s.size(); i++) {
        9:   86-block  0
      140:   86-block  1
      131:   86-block  2
        -:   87:
      131:   88:        if ( muestraSuperaUmbral(s[i], umbral) ) {
      131:   88-block  0
      131:   88-block  1
      131:   88-block  2
       49:   89:        	agregarIntervaloSiCorresponde(ret,inicioSilencio, i-1, esSilencio);
       49:   89-block  0
       49:   90:        	inicioSilencio = i + 1;
       49:   91:        	esSilencio = false;
       49:   92:        }
       49:   92-block  0
       82:   93:        else if (i>0){
       82:   93-block  0
       74:   94:        	if(muestraSuperaUmbral(s[i-1], umbral) ){
       74:   94-block  0
       74:   94-block  1
       74:   94-block  2
       24:   95:        		inicioSilencio = i;
       24:   96:        	}
       24:   96-block  0
       74:   97:        	if(i + 1 - inicioSilencio >= freq * 0.2){
       74:   97-block  0
       50:   98:        		esSilencio = true;
       50:   99:        	}
       50:   99-block  0
       74:  100:        }
       74:  100-block  0
        -:  101:
      131:  102:    }
      131:  102-block  0
        -:  103:
        9:  104:    if (esSilencio) { /* agregar silencio en caso de que termine al final */
        9:  104-block  0
        3:  105:    	agregarIntervaloSiCorresponde(ret, inicioSilencio, s.size() - 1, esSilencio);
        3:  105-block  0
        3:  106:    }
        3:  106-block  0
        -:  107:
        9:  108:    return ret;
        9:  109:}
    $$$$$:  109-block  0
        9:  109-block  1
    $$$$$:  109-block  2
        9:  109-block  3
    $$$$$:  109-block  4
        -:  110:
        8:  111:bool hablantesSuperpuestos(reunion r, int prof, int freq, int umbral)
        8:  111-block  0
        -:  112:{
       48:  113:    for (int i = 0; i < r[0].first.size(); ++i) {
        8:  113-block  0
       48:  113-block  1
       40:  113-block  2
       46:  114:        int personasHablando = 0;
      154:  115:        for (int j = 0; j < r.size(); ++j) {
       46:  115-block  0
      154:  115-block  1
      108:  115-block  2
      114:  116:            if ( estaHablando(r[j].first, i, umbral) ) {
      114:  116-block  0
      114:  116-block  1
    $$$$$:  116-block  2
    $$$$$:  116-block  3
       23:  117:                ++personasHablando;
       23:  118:            }
       23:  118-block  0
      114:  119:            if (personasHablando == 2) {
      114:  119-block  0
        6:  120:                return true;
        6:  120-block  0
        -:  121:            }
      108:  122:        }
      108:  122-block  0
       40:  123:    }
       40:  123-block  0
        2:  124:    return false;
        2:  124-block  0
        8:  125:}
        8:  125-block  0
        -:  126:
        4:  127:senial reconstruir(senial s, int prof, int freq)
        4:  127-block  0
        -:  128:{
        4:  129:    vector<int> sCero = s;
       49:  130:    for (int i = 0; i <= s.size(); ++i) {
        4:  130-block  0
       49:  130-block  1
       45:  130-block  2
       45:  131:        if (s[i] == 0) {
       45:  131-block  0
       45:  131-block  1
       15:  132:            if (!esPasajePorCero(sCero, i)) {
       15:  132-block  0
       15:  132-block  1
       15:  132-block  2
    $$$$$:  132-block  3
       14:  133:                s[i] = valor(sCero, i);
       14:  133-block  0
       14:  133-block  1
       14:  133-block  2
    $$$$$:  133-block  3
       14:  134:            }
       14:  134-block  0
       15:  135:        }
       15:  135-block  0
       45:  136:    }
       45:  136-block  0
        -:  137:
        4:  138:    return s;
        4:  139:}
    $$$$$:  139-block  0
        4:  139-block  1
    $$$$$:  139-block  2
    $$$$$:  139-block  3
        -:  140:
        3:  141:void filtradoMediana(senial &s, int R, int prof, int freq)
        3:  141-block  0
        -:  142:{
        3:  143:    senial w; // 1
        3:  144:    senial sCero = s;
        3:  144-block  0
       33:  145:    for (int i = 0; i < s.size(); ++i) { // n
        3:  145-block  0
       33:  145-block  1
       30:  145-block  2
       30:  146:        if (!coincidenExtremos(sCero, i, R)) { // 1
       30:  146-block  0
       30:  146-block  1
       30:  146-block  2
    $$$$$:  146-block  3
       14:  147:            w = ordenarSenialW(subSeq(sCero, i - R, i + R + 1)); //
       14:  147-block  0
       14:  147-block  1
       14:  147-block  2
    $$$$$:  147-block  3
    $$$$$:  147-block  4
       14:  148:            s[i] = w[R]; // 1
       14:  148-block  0
       14:  148-block  1
       14:  149:        }
       14:  149-block  0
       30:  150:    }
       30:  150-block  0
        3:  151:}
    $$$$$:  151-block  0
    $$$$$:  151-block  1
    $$$$$:  151-block  2
        3:  151-block  3
    $$$$$:  151-block  4
    $$$$$:  151-block  5
    $$$$$:  151-block  6
